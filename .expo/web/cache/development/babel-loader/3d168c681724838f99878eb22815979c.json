{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blarg\\\\Documents\\\\stardle\\\\Puzzle.tsx\";\nimport React from 'react';\nimport { View, TextInput } from \"./components/Themed\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar mockdata = [\"Harry Potter and the Half-Blood Prince\", \"Daniel Radcliffe\", \"Rupert Grint\", \"Emma Watson\", \"Helena Bonham Carter\", \"Robbie Coltrane\", \"Warwick Davis\"];\nvar filmmockdata = [\"jericho\", \"iron man\", \"watership down\"];\nexport default function Puzzle() {\n  var holdoverdata = filmmockdata;\n  var oldtext = '';\n\n  function textHandler(text) {\n    console.log(text.toLowerCase());\n    var newData = [];\n\n    for (var i = 0; i < holdoverdata.length; i += 1) {\n      if (filmmockdata[i].includes(text.toLowerCase())) {\n        newData.push(filmmockdata[i]);\n      }\n    }\n\n    holdoverdata = newData;\n    console.log(holdoverdata);\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    onChange: function onChange(e) {\n      textHandler(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  text: {\n    margin: 5\n  },\n  container: {\n    alignContent: 'center'\n  },\n  input: {\n    borderWidth: 1,\n    borderColor: \"black\"\n  }\n});","map":{"version":3,"sources":["C:/Users/blarg/Documents/stardle/Puzzle.tsx"],"names":["React","View","TextInput","mockdata","filmmockdata","Puzzle","holdoverdata","oldtext","textHandler","text","console","log","toLowerCase","newData","i","length","includes","push","styles","input","e","target","value","StyleSheet","create","margin","container","alignContent","borderWidth","borderColor"],"mappings":";AAAA,OAAOA,KAAP,MAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,SAAf;;AAGA,IAAIC,QAAwB,GAAG,CAC3B,wCAD2B,EAE3B,kBAF2B,EAG3B,cAH2B,EAI3B,aAJ2B,EAK3B,sBAL2B,EAM3B,iBAN2B,EAO3B,eAP2B,CAA/B;AAUA,IAAIC,YAA4B,GAAG,CAC/B,SAD+B,EAE/B,UAF+B,EAG/B,gBAH+B,CAAnC;AAQA,eAAe,SAASC,MAAT,GAAmB;AAwC9B,MAAIC,YAAY,GAAGF,YAAnB;AACA,MAAIG,OAAO,GAAG,EAAd;;AAEA,WAASC,WAAT,CAAqBC,IAArB,EAAkC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,WAAL,EAAZ;AACA,QAAIC,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACS,MAAjC,EAAyCD,CAAC,IAAI,CAA9C,EAAgD;AAC5C,UAAIV,YAAY,CAACU,CAAD,CAAZ,CAAgBE,QAAhB,CAAyBP,IAAI,CAACG,WAAL,EAAzB,CAAJ,EAAiD;AAC7CC,QAAAA,OAAO,CAACI,IAAR,CAAab,YAAY,CAACU,CAAD,CAAzB;AACH;AACJ;;AACDR,IAAAA,YAAY,GAAGO,OAAf;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACH;;AAED,SAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEY,MAAM,CAACC,KAAzB;AAAgC,IAAA,QAAQ,EAAE,kBAACC,CAAD,EAAO;AAACZ,MAAAA,WAAW,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AAA4B,KAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAGH;AAED,IAAMJ,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC7Bf,EAAAA,IAAI,EAAE;AACFgB,IAAAA,MAAM,EAAE;AADN,GADuB;AAI7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,YAAY,EAAE;AADP,GAJkB;AAO7BR,EAAAA,KAAK,EAAE;AACHS,IAAAA,WAAW,EAAE,CADV;AAEHC,IAAAA,WAAW,EAAE;AAFV;AAPsB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { View, TextInput, TouchableOpacity, Text } from \"./components/Themed\"\r\nimport { StyleSheet, TextInput as HiddenText } from 'react-native'\r\n\r\nlet mockdata : Array<String> = [\r\n    \"Harry Potter and the Half-Blood Prince\",\r\n    \"Daniel Radcliffe\",\r\n    \"Rupert Grint\",\r\n    \"Emma Watson\",\r\n    \"Helena Bonham Carter\",\r\n    \"Robbie Coltrane\",\r\n    \"Warwick Davis\"\r\n]\r\n\r\nlet filmmockdata : Array<String> = [\r\n    \"jericho\",\r\n    \"iron man\",\r\n    \"watership down\",\r\n]\r\n\r\n\r\n\r\nexport default function Puzzle () {\r\n    // function keyHandler(key: string, keyCode: number){\r\n    //     inputRef.current.focus()\r\n    //     console.log(key)\r\n    //     if (key.length === 1 && /[a-zA-Z ]/.test(key)){\r\n    //         console.log(\"etter\")\r\n    //         setTextOne(textOne + key)\r\n    //     }\r\n    //     else if (key === \"Backspace\" && textOne.length > 0){\r\n    //         setTextOne(textOne.substring(0, textOne.length - 1))\r\n    //     }\r\n    // }\r\n\r\n    // const [textOne, setTextOne] = useState(\"\")\r\n\r\n    // const inputRef = useRef(null);\r\n    // useEffect(() => {\r\n    //     inputRef.current && inputRef.current.focus();\r\n    // }, []);\r\n\r\n    // // \r\n    // <HiddenText ref={inputRef} style={{width: 0, height: 0}} onKeyPress={(e) => {\r\n    //     // used to prevent from losing focus on pressing Tab or Enter\r\n    //     if (e.keyCode === 9 || e.keyCode === 13 || e.key === \"Alt\"){\r\n    //         e.preventDefault();\r\n    //     }\r\n    //     keyHandler(e.key);\r\n    //     inputRef.current && inputRef.current.focus();\r\n    // }}></HiddenText>\r\n    \r\n//     <TouchableOpacity onPress={() => keyHandler(\"q\")}>\r\n//     <Text>Q</Text>\r\n// </TouchableOpacity>\r\n// <TouchableOpacity onPress={() => keyHandler(\"w\")}>\r\n//     <Text>W</Text>\r\n// </TouchableOpacity>\r\n// <TouchableOpacity onPress={() => keyHandler(\"e\")}>\r\n//     <Text>E</Text>\r\n// </TouchableOpacity>\r\n\r\n    let holdoverdata = filmmockdata\r\n    let oldtext = ''\r\n\r\n    function textHandler(text: string){\r\n        console.log(text.toLowerCase());\r\n        let newData = [];\r\n        for (let i = 0; i < holdoverdata.length; i += 1){\r\n            if (filmmockdata[i].includes(text.toLowerCase())){\r\n                newData.push(filmmockdata[i]);\r\n            }\r\n        }\r\n        holdoverdata = newData;\r\n        console.log(holdoverdata);\r\n    }\r\n\r\n    return <View>\r\n        <TextInput style={styles.input} onChange={(e) => {textHandler(e.target.value)}}></TextInput>\r\n    </View>\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        margin: 5,\r\n    },\r\n    container: {\r\n        alignContent: 'center'\r\n    },\r\n    input: {\r\n        borderWidth: 1,\r\n        borderColor: \"black\"\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}