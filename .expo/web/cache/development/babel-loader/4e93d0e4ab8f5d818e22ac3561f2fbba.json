{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\blarg\\\\Documents\\\\stardle\\\\components\\\\Themed.tsx\";\nvar _excluded = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded2 = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded3 = [\"style\", \"lightColor\", \"darkColor\"];\nimport React, { useContext } from \"react\";\nimport DefaultView from \"react-native-web/dist/exports/View\";\nimport DefaultTextInput from \"react-native-web/dist/exports/TextInput\";\nimport DefaultTouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Colors from \"../constants/Colors\";\nimport AppContext from \"./AppContext\";\nexport function useThemeColor(props, colorName) {\n  var context = useContext(AppContext);\n  var theme = context.scheme;\n  var colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\nexport function View(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, \"background\");\n  return React.createElement(DefaultView, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }));\n}\nexport function TextInput(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded2);\n\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, \"text\");\n  var placeholderTextColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, \"placeholderTextColor\");\n  return React.createElement(DefaultTextInput, _extends({\n    style: [{\n      color: color\n    }, style],\n    placeholderTextColor: placeholderTextColor\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }));\n}\nexport function TouchableOpacity(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = _objectWithoutProperties(props, _excluded3);\n\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, \"touchableColor\");\n  return React.createElement(DefaultTouchableOpacity, _extends({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/blarg/Documents/stardle/components/Themed.tsx"],"names":["React","useContext","Colors","AppContext","useThemeColor","props","colorName","context","theme","scheme","colorFromProps","View","style","lightColor","darkColor","otherProps","backgroundColor","light","dark","TextInput","color","placeholderTextColor","TouchableOpacity"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;AAMA,OAAOC,MAAP;AACA,OAAOC,UAAP;AAOA,OAAO,SAASC,aAAT,CACLC,KADK,EAELC,SAFK,EAGL;AACA,MAAMC,OAAO,GAAGN,UAAU,CAACE,UAAD,CAA1B;AACA,MAAMK,KAAK,GAAGD,OAAO,CAACE,MAAtB;AACA,MAAMC,cAAc,GAAGL,KAAK,CAACG,KAAD,CAA5B;;AAEA,MAAIE,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO;AACL,WAAOR,MAAM,CAACM,KAAD,CAAN,CAAcF,SAAd,CAAP;AACD;AACF;AAOD,OAAO,SAASK,IAAT,CAAcN,KAAd,EAAgC;AACnC,MAAQO,KAAR,GAAwDP,KAAxD,CAAQO,KAAR;AAAA,MAAeC,UAAf,GAAwDR,KAAxD,CAAeQ,UAAf;AAAA,MAA2BC,SAA3B,GAAwDT,KAAxD,CAA2BS,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDV,KAAxD;;AACA,MAAMW,eAAe,GAAGZ,aAAa,CACnC;AAAEa,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GADmC,EAEnC,YAFmC,CAArC;AAKA,SAAO,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBJ,KAAtB;AAApB,KAAsDG,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACH;AAED,OAAO,SAASI,SAAT,CAAmBd,KAAnB,EAA0C;AAC7C,MAAQO,KAAR,GAAwDP,KAAxD,CAAQO,KAAR;AAAA,MAAeC,UAAf,GAAwDR,KAAxD,CAAeQ,UAAf;AAAA,MAA2BC,SAA3B,GAAwDT,KAAxD,CAA2BS,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDV,KAAxD;;AACA,MAAMe,KAAK,GAAGhB,aAAa,CAAC;AAAEa,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AACA,MAAMO,oBAAoB,GAAGjB,aAAa,CACxC;AAAEa,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GADwC,EAExC,sBAFwC,CAA1C;AAKA,SACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAE,CAAC;AAAEM,MAAAA,KAAK,EAALA;AAAF,KAAD,EAAYR,KAAZ,CADT;AAEE,IAAA,oBAAoB,EAAES;AAFxB,KAGMN,UAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAOD;AAEH,OAAO,SAASO,gBAAT,CAA0BjB,KAA1B,EAAwD;AAC7D,MAAQO,KAAR,GAAwDP,KAAxD,CAAQO,KAAR;AAAA,MAAeC,UAAf,GAAwDR,KAAxD,CAAeQ,UAAf;AAAA,MAA2BC,SAA3B,GAAwDT,KAAxD,CAA2BS,SAA3B;AAAA,MAAyCC,UAAzC,4BAAwDV,KAAxD;;AACA,MAAMW,eAAe,GAAGZ,aAAa,CACnC;AAAEa,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GADmC,EAEnC,gBAFmC,CAArC;AAKA,SACE,oBAAC,uBAAD;AACE,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBJ,KAAtB;AADT,KAEMG,UAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD","sourcesContent":["import React, { useContext } from \"react\"\r\nimport { \r\n  View as DefaultView, \r\n  TextInput as DefaultTextInput,\r\n  TouchableOpacity as DefaultTouchableOpacity\r\n } from \"react-native\"\r\nimport Colors from \"../constants/Colors\"\r\nimport AppContext from \"./AppContext\"\r\n\r\ntype ThemeProps = {\r\n    lightColor?: string;\r\n    darkColor?: string;\r\n  };\r\n\r\nexport function useThemeColor(\r\n  props: { light?: string; dark?: string },\r\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\r\n) {\r\n  const context = useContext(AppContext);\r\n  const theme = context.scheme;\r\n  const colorFromProps = props[theme];\r\n\r\n  if (colorFromProps) {\r\n    return colorFromProps;\r\n  } else {\r\n    return Colors[theme][colorName];\r\n  }\r\n}\r\n\r\nexport type ViewProps = ThemeProps & DefaultView[\"props\"];\r\nexport type TextInputProps = ThemeProps & DefaultTextInput[\"props\"];\r\nexport type TouchableOpacityProps = ThemeProps &\r\n  DefaultTouchableOpacity[\"props\"];\r\n\r\nexport function View(props: ViewProps) {\r\n    const { style, lightColor, darkColor, ...otherProps } = props;\r\n    const backgroundColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"background\"\r\n    );\r\n  \r\n    return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\r\n}\r\n\r\nexport function TextInput(props: TextInputProps) {\r\n    const { style, lightColor, darkColor, ...otherProps } = props;\r\n    const color = useThemeColor({ light: lightColor, dark: darkColor }, \"text\");\r\n    const placeholderTextColor = useThemeColor(\r\n      { light: lightColor, dark: darkColor },\r\n      \"placeholderTextColor\"\r\n    );\r\n  \r\n    return (\r\n      <DefaultTextInput\r\n        style={[{ color }, style]}\r\n        placeholderTextColor={placeholderTextColor}\r\n        {...otherProps}\r\n      />\r\n    );\r\n  }\r\n\r\nexport function TouchableOpacity(props: TouchableOpacityProps) {\r\n  const { style, lightColor, darkColor, ...otherProps } = props;\r\n  const backgroundColor = useThemeColor(\r\n    { light: lightColor, dark: darkColor },\r\n    \"touchableColor\"\r\n  );\r\n\r\n  return (\r\n    <DefaultTouchableOpacity\r\n      style={[{ backgroundColor }, style]}\r\n      {...otherProps}\r\n    />\r\n  );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}